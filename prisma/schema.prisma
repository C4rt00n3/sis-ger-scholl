generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Escola {
  id                       Int          @id @default(autoincrement())
  nome                     String       @db.VarChar(150) // Nome completo da escola
  nomeFantasia             String?      @db.VarChar(150) // Nome fantasia da escola (opcional)
  entidadeMantenedora      String?      @db.VarChar(100) // Entidade mantenedora da escola (opcional)
  secretaria               String?      @db.VarChar(100) // Secretaria da escola (opcional)
  cnpj                     String       @db.VarChar(20) // CNPJ da escola (opcional)
  cadastroMEC              String?      @db.VarChar(30) // Cadastro do MEC da escola (opcional)
  fotoEscola               String?      @db.VarChar(200) // URL da foto da escola (opcional)
  nomeFotoEscola           String? // Nome da foto da escola (opcional)
  diretor                  String? // Nome do diretor da escola (opcional)
  secretario               String? // Nome do secretário da escola (opcional)
  coordPedagogico          String? // Nome do coordenador pedagógico da escola (opcional)
  email                    String? // Email da escola (opcional)
  paginaRedeSocial         String? // Página da escola em rede social (opcional)
  docAutorizacaoDiretor    String?      @db.VarChar(200) // Documento de autorização do diretor (opcional)
  docAutorizacaoSecretario String?      @db.VarChar(200) // Documento de autorização do secretário (opcional)
  nivel                    NivelEscolar // Nível escolar

  endereco   Endereco? @relation(fields: [enderecoId], references: [id])
  enderecoId Int       @unique

  series               Serie[]
  Matriculas           Matricula[]
  funcionarios         Funcionario[]
  funcionarioDetalhes  FuncionarioDetalhe[]
  alunos               Aluno[]
  AlunoTransferencia   AlunoTransferencia?  @relation(fields: [alunoTransferenciaId], references: [id])
  alunoTransferenciaId Int?                 @unique()
  Usuarios             Usuarios[]
}

model Endereco {
  id          Int          @id @default(autoincrement())
  logradouro  String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  estado      EstadoBrasil
  cep         String

  Parada   Parada? @relation(fields: [paradaId], references: [id])
  paradaId Int?

  TranspEscolar TranspEscolar[]

  Escola               Escola?
  Aluno                Aluno?
  AlunoTransferencia   AlunoTransferencia? @relation(fields: [alunoTransferenciaId], references: [id])
  alunoTransferenciaId Int?
}

model Funcionario {
  id                 Int       @id() @default(autoincrement())
  sscola             Escola    @relation(fields: [escolaId], references: [id])
  MesReferencia      String?
  dataDo             DateTime?
  name               String    @db.VarChar(100)
  alcunha            String?
  cargo              String?   @db.VarChar(80)
  funcaoDesempenhada String?   @db.VarChar(80)
  statusFunc         String?
  vinculo            String?
  carga_Horaria      Int?      @default(0)
  matricula          String?
  faltas             String?
  licenca            String?
  extras             String?
  OBS                String?
  escolaId           Int
}

model Aluno {
  // indentificador
  id Int @id @default(autoincrement())

  // Rows
  celularAluno    String?
  nome            String   @unique()
  email           String?
  mudancaNome     String?
  procedAluno     String?
  ficheiro        String?
  alimentos       String?
  areaProtecaoGov String?
  data_Registro   DateTime @default(now())

  // Enums
  corRaca_Aluno CorRaca
  sexo          Sexo

  // ForingKeys
  convenioId           Int? @unique
  documentoId          Int? @unique
  alunoTransferenciaId Int? @unique
  enderecoId           Int  @unique

  // Many:Many
  obsNotificadasEscola Ocorrencias[]
  MedicamentosAlergia  MedicamentosAlergia[]
  filiacao             FiliacaoAluno[]

  // Relações 
  Documentos         Documento?          @relation(fields: [documentoId], references: [id], onDelete: Cascade)
  Convenio           Convenio?           @relation(fields: [convenioId], references: [id], onDelete: Cascade)
  AlunoTransferencia AlunoTransferencia? @relation(fields: [alunoTransferenciaId], references: [id], onDelete: Cascade)
  Endereco           Endereco            @relation(fields: [enderecoId], references: [id], onDelete: Cascade)
  Matricula          Matricula?
  Escola             Escola?             @relation(fields: [escolaId], references: [id])
  escolaId           Int?

  Serie   Serie  @relation(fields: [serieId], references: [id])
  serieId Int
  Turma   Turma? @relation(fields: [turmaId], references: [id])
  turmaId Int?
}

model MedicamentosAlergia {
  id             Int     @id @default(autoincrement())
  nomeCientifico String?
  nomePopular    String
  Aluno          Aluno?  @relation(fields: [alunoId], references: [id])
  alunoId        Int?
}

model Images {
  id                Int              @id @default(autoincrement())
  imagem            Bytes
  RG                RG?              @relation(fields: [rGId], references: [id])
  rGId              Int?
  SUS               SUS?             @relation(fields: [sUSId], references: [id])
  sUSId             Int?
  TituloEleitor     TituloEleitor?   @relation(fields: [tituloEleitorId], references: [id])
  tituloEleitorId   Int?
  SituacaoMilitar   SituacaoMilitar? @relation(fields: [situacaoMilitarId], references: [id])
  situacaoMilitarId Int?
}

model SUS {
  id         Int        @id @default(autoincrement())
  nome       String
  nascimento DateTime
  sexo       Sexo
  numero     String     @unique @db.VarChar(15)
  images     Images[]
  Documento  Documento?
}

model TituloEleitor {
  id        Int    @id @default(autoincrement())
  nome      String
  inscricao String @unique @db.VarChar(12)

  dataNascimento DateTime
  dataEmissao    DateTime

  pai String?
  mae String?

  zona  Int
  secao Int

  Images    Images[]
  Documento Documento?
}

model SituacaoMilitar {
  id              Int    @id @default(autoincrement())
  tipoDeDocumento String
  ra              String @unique @db.VarChar(12)
  cpf             String @unique @db.VarChar(11)
  nome            String

  pai String
  mae String

  localNascimento String
  dataNascimento  DateTime

  situacaoServicoMilitar String

  validade DateTime?

  Documento Documento?
  Images    Images[]
}

model RG {
  id             Int        @id @default(autoincrement())
  rgNumero       String     @unique
  cpf            String     @unique
  dataExpedicao  DateTime?
  dataNascimento DateTime
  orgaoEmissor   String
  UF             String
  mae            String?
  pai            String?
  naturalidade   String
  docOrigem      String
  images         Images[]
  Documento      Documento?
  documentoId    Int?

  @@map("rg")
}

model Documento {
  id    Int     @id @default(autoincrement())
  livro String?
  folha String?

  rGId              Int? @unique
  sUSId             Int? @unique
  tituloEleitorId   Int? @unique
  situacaoMilitarId Int? @unique

  RG              RG?              @relation(fields: [rGId], references: [id], onDelete: Cascade)
  SUS             SUS?             @relation(fields: [sUSId], references: [id], onDelete: Cascade)
  TituloEleitor   TituloEleitor?   @relation(fields: [tituloEleitorId], references: [id], onDelete: Cascade)
  SituacaoMilitar SituacaoMilitar? @relation(fields: [situacaoMilitarId], references: [id], onDelete: Cascade)

  Aluno Aluno?
}

model Convenio {
  id         Int      @id @default(autoincrement())
  nome       String
  descricao  String?
  dataInicio DateTime
  dataFim    DateTime
  ativo      Boolean  @default(true)
  Aluno      Aluno?
}

model FiliacaoAluno {
  id               Int            @id @default(autoincrement())
  nome             String
  celular          String?
  telefoneTrabalho String?        @db.VarChar(11)
  profissao        String?
  RG               String?        @db.VarChar(11)
  email            String?
  grauInstrucao    GrauInstrucao?

  alunoId Int?

  Aluno Aluno? @relation(fields: [alunoId], references: [id])
}

model AlunoTransferencia {
  id Int @id @default(autoincrement())

  procedencia String

  Aluno       Aluno?
  Escola      Escola?
  MotivoSaida MotivoSaida?
  Endereco    Endereco[]
}

model Serie {
  id        Int     @id() @default(autoincrement())
  nomeSerie String  @db.VarChar(100)
  Escola    Escola? @relation(fields: [escolaId], references: [id])
  nivelEscolar NivelEscolar
  escolaId  Int?
  turmas    Turma[]
  Aluno     Aluno[]
}

model Turma {
  id           Int          @id() @default(autoincrement())
  nome         String       @db.VarChar(100)
  Alunos       Aluno[]
  Serie        Serie?       @relation(fields: [serieId], references: [id])
  serieId      Int?
}

model FuncionarioDetalhe {
  id             Int       @id() @default(autoincrement())
  escolaId       Int       @unique
  Escola         Escola?   @relation(fields: [escolaId], references: [id])
  Dt_Cad         DateTime?
  NomeFunc       String    @unique(map: "Tbl_FuncDet$Fornecedor") @db.VarChar(100)
  Cargo          String?
  Frequencia     String?
  Atestados      String?
  SSMA_TimeStamp DateTime
}

model Ocorrencias {
  Codigo               Int     @id() @default(autoincrement()) @map("Codigo")
  Cod_Escola           Int?    @default(0)
  Cod_Aluno            Int?    @default(0)
  Nome_AlunoAutor      String?
  Cod_Matricula        Int?    @default(0)
  AnoLetivo            Int?    @default(0)
  AnoEscolar           String?
  Turma                String?
  NomeDeclarante       String?
  Cadastro             String?
  DataOcorrencia       String?
  RelatoOcorrencia     String?
  AtoIndisciplinar     String?
  DecAutor             String?
  Resp_Ocorrencia      String?
  Conclusao            String?
  Obs                  String?
  Resp_AtendOcorrencia String?
  Aluno                Aluno?  @relation(fields: [alunoId], references: [id])
  alunoId              Int?
}

model TranspEscolar {
  id              Int    @id @default(autoincrement())
  Moto_Nome       String
  Moto_Fone       String
  Moto_CNH        String
  Moto_CatCNH     String
  Moto_RG         String
  Prop_Nome       String
  Prop_Fone       String
  Prop_CPF        String
  Prop_RG         String
  Veic_Marca      String
  Veic_Modelo     String
  Veic_Capacidade String
  Veic_Placa      String

  // o indece 0 referece ao motorista e o indece 1 ao propietario
  Moto_Endereco Endereco[]
  Rotas         Rota[]
}

model Rota {
  id   Int    @id @default(autoincrement())
  nome String

  turno Turno

  TranspEscolar TranspEscolar[]
  paradas       Parada[]
}

model Parada {
  id       Int        @id @default(autoincrement())
  nome     String
  horario  String
  endereco Endereco[]
  Rota     Rota?      @relation(fields: [rotaId], references: [id])
  rotaId   Int?
}

model MotivoSaida {
  id                   Int                @id() @default(autoincrement())
  motivoSaida          String             @db.VarChar(80)
  AlunoTransferencia   AlunoTransferencia @relation(fields: [alunoTransferenciaId], references: [id])
  alunoTransferenciaId Int                @unique()

  @@index([id])
}

model Matricula {
  // Indentificador
  id Int @id @default(autoincrement())

  // Rows
  dt_Matricula DateTime     @default(now())
  anoLetivo    Int
  nivel        NivelEscolar

  horasAnual String?
  frequencia Float?
  dataSaida  DateTime?

  resultadoFinal String?
  localFotoAluno String?
  dt_Alteracao   DateTime @updatedAt
  ceratedAt      DateTime @default(now())

  // Relações One:One
  Aluno  Aluno   @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  Escola Escola? @relation(fields: [escolaId], references: [id])

  // Foringkeys
  escolaId Int?
  alunoId  Int  @unique

  // Many:Many
  Materia Materia[]

  // Enums
  status Status @default(EM_ANDAMENTO)
  turno  Turno
}

model Materia {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  notas       Nota[]
  faltas      Falta[]
  matriculaId Int
  matricula   Matricula @relation(fields: [matriculaId], references: [id])
}

model Nota {
  id        Int     @id @default(autoincrement())
  resultado Int // Mínimo 0, máximo 10
  materiaId Int
  materia   Materia @relation(fields: [materiaId], references: [id])
}

model Falta {
  id        Int      @id @default(autoincrement())
  data      DateTime @default(now())
  materiaId Int
  materia   Materia  @relation(fields: [materiaId], references: [id])
  // Anexa justificação
}

model Dias {
  ID        Int       @id @default(autoincrement())
  Numdia    Int?      @default(0)
  DataAtual DateTime?
}

model Funcoes {
  IdFuncao       Int      @id() @default(autoincrement())
  Funcao         String   @db.VarChar(100)
  Objeto         String?  @db.VarChar(50)
  Status         Boolean? @default(false)
  StatusSuspenso Boolean? @default(false)
  SSMA_TimeStamp DateTime

  @@index([IdFuncao], map: "tblFunções$IdFuncao")
  @@index([Objeto], map: "tblFunções$idxFunFormulario")
  @@index([Funcao], map: "tblFunções$idxFunNome")
  @@map("tblFunções")
}

model Ribbons {
  Id             Int      @id @default(autoincrement())
  RibbonName     String?  @db.VarChar(100)
  RibbonXml      String?
  Versao         Int?
  SSMA_TimeStamp DateTime
}

model Usuarios {
  id          Int       @id @default(autoincrement())
  usuario     String    @unique
  email       String    @unique
  alcunha     String?
  senha       String
  bloqueado   Boolean?  @default(false)
  userSetor   String?
  strDataHora DateTime?
  Escola      Escola?   @relation(fields: [escolaId], references: [id])
  escolaId    Int?

  createdAt DateTime @default(now())

  @@index([id])
}

enum Turno {
  Matutino
  Vespertino
  Noturno
}

enum Status {
  ATIVO
  DESATIVADO
  EM_ANDAMENTO
}

enum CorRaca {
  preta
  parda
  branco
  indigena
}

enum Sexo {
  Feminino
  Masculino
  Outro
}

enum EstadoBrasil {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

enum TipoSangue {
  A_POSITIVO
  A_NEGATIVO
  B_POSITIVO
  B_NEGATIVO
  AB_POSITIVO
  AB_NEGATIVO
  O_POSITIVO
  O_NEGATIVO
}

enum NivelEscolar {
  ENSINO_FUNDAMENTAL
  ENSINO_MEDIO
  ENSINO_SUPERIOR
}

enum GrauInstrucao {
  FUNDAMENTAL
  MEDIO
  SUPERIOR
  POS_GRADUACAO
}
